name: Build Single-File Eaglercraft

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Node.js 18 (for pack step)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Make build scripts executable
        run: |
          chmod +x CompileLatestClient.sh || true

      - name: Build client (shell script or fallback)
        run: |
          if [ -f "./CompileLatestClient.sh" ]; then
            ./CompileLatestClient.sh
          elif [ -f "./CompileLatestClient.bat" ]; then
            # Try running the Windows .bat via bash as a last resort
            bash ./CompileLatestClient.bat || (echo "Please add a Linux build script" && exit 1)
          else
            echo "No build script found. Please commit CompileLatestClient.sh (or adjust this step)."
            exit 1
          fi

      - name: Locate built client folder
        id: locate
        shell: bash
        run: |
          set -e
          # Try to find a folder containing an index.html (production build output)
          BUILD_DIR="$(dirname "$(git ls-files -z | xargs -0 -I{} bash -lc 'if [[ "{}" == *index.html* ]]; then dirname "{}"; fi' | head -n1)")"
          if [ -z "$BUILD_DIR" ] || [ ! -f "$BUILD_DIR/index.html" ]; then
            # Fallback: search workspace for index.html excluding node_modules and .git
            BUILD_DIR=$(find "$GITHUB_WORKSPACE" -type f -name index.html \
              -not -path "*/node_modules/*" -not -path "*/.git/*" \
              -exec dirname {} \; | head -n 1)
          fi
          if [ -z "$BUILD_DIR" ] || [ ! -f "$BUILD_DIR/index.html" ]; then
            echo "Could not find built index.html. Adjust the build or set BUILD_DIR manually."
            exit 1
          fi
          echo "BUILD_DIR=$BUILD_DIR" | tee -a $GITHUB_OUTPUT

      - name: Write packer script (make-singlefile.js)
        run: |
          cat > make-singlefile.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function guessMime(f){
            const e = f.toLowerCase().split('.').pop();
            const m = {
              js:'text/javascript',json:'application/json',html:'text/html',css:'text/css',
              png:'image/png',jpg:'image/jpeg',jpeg:'image/jpeg',gif:'image/gif',webp:'image/webp',svg:'image/svg+xml',
              mp3:'audio/mpeg',ogg:'audio/ogg',wav:'audio/wav',mp4:'video/mp4',wasm:'application/wasm',
              epk:'application/octet-stream',zip:'application/zip',pak:'application/octet-stream'
            };
            return m[e] || 'application/octet-stream';
          }
          function walk(root){
            const out=[];
            (function go(d){
              for(const n of fs.readdirSync(d)){
                const p=path.join(d,n);
                const st=fs.statSync(p);
                if(st.isDirectory()) go(p);
                else out.push({abs:p, rel:path.relative(root,p).replace(/\\\\/g,'/')});
              }
            })(root);
            return out;
          }
          function toB64(file){ return fs.readFileSync(file).toString('base64'); }

          const args = process.argv.slice(2);
          let inDir=null, outFile=null, maps=[];
          for(let i=0;i<args.length;i++){
            if(args[i]==='-i'){ inDir=args[++i]; }
            else if(args[i]==='-o'){ outFile=args[++i]; }
            else if(args[i]==='--map'){ maps.push(args[++i]); }
          }
          if(!inDir || !outFile){ console.error('Usage: node make-singlefile.js -i <inputDir> -o <output.html> [--map from=to]'); process.exit(1); }
          inDir = path.resolve(inDir);

          let indexPath = path.join(inDir,'index.html');
          if(!fs.existsSync(indexPath)){ console.error('index.html not found in', inDir); process.exit(2); }
          let indexHtml = fs.readFileSync(indexPath,'utf8');

          const classesPath = path.join(inDir,'classes.js');
          if(fs.existsSync(classesPath)){
            const classesJs = fs.readFileSync(classesPath,'utf8');
            indexHtml = indexHtml.replace(/<script[^>]*src=["'][^"']*classes\.js["'][^>]*><\\/script>/i,
              `<script>\\n${classesJs}\\n</script>`);
          }

          const files = walk(inDir).filter(f => f.rel !== 'index.html' && f.rel !== 'classes.js');
          const assetMap = {};
          for(const f of files){
            const mime = guessMime(f.rel);
            const b64 = toB64(f.abs);
            assetMap[f.rel] = { mime, data: b64 };
            const base = path.basename(f.rel);
            if(!assetMap[base]) assetMap[base] = { mime, data: b64 };
          }
          for(const m of maps){
            const i = m.indexOf('=');
            if(i>0){
              const from = m.slice(0,i), to = m.slice(i+1);
              if(assetMap[from]) assetMap[to] = assetMap[from];
            }
          }

          function inject(html, assetMap){
            const runtime =
`<script>(function(){
  const ASSETS=${JSON.stringify(assetMap)};
  const _fetch=window.fetch.bind(window);
  const byKey=new Map();
  for(const k in ASSETS) byKey.set(k,ASSETS[k]);
  for(const k in ASSETS){ const b=k.split('/').pop(); if(!byKey.has(b)) byKey.set(b,ASSETS[k]); }
  window.fetch=async function(i,n){ try{
    const u=typeof i==='string'?i:i.url;
    const k=u.replace(/^\\.?\\//,'').replace(/^.*?:\\/\\//,'');
    const hit=(byKey.get(k)||byKey.get(k.split('/').pop()));
    if(hit){ const bin=Uint8Array.from(atob(hit.data),c=>c.charCodeAt(0));
      return new Response(bin,{status:200,headers:{'Content-Type':hit.mime}});
    }
  }catch(e){} return _fetch(i,n);
  };
  const _open=XMLHttpRequest.prototype.open, _send=XMLHttpRequest.prototype.send;
  XMLHttpRequest.prototype.open=function(m,u,a,us,p){ this._u=u; return _open.apply(this,arguments); };
  XMLHttpRequest.prototype.send=function(b){
    try{
      const k=(this._u||'').replace(/^\\.?\\//,'').replace(/^.*?:\\/\\//,'');
      const hit=(byKey.get(k)||byKey.get(k.split('/').pop()));
      if(hit){
        const bin=Uint8Array.from(atob(hit.data),c=>c.charCodeAt(0));
        const blob=new Blob([bin],{type:hit.mime});
        const fr=new FileReader();
        fr.onload=()=>{ Object.defineProperty(this,'response',{value:fr.result});
          Object.defineProperty(this,'responseText',{value:fr.result});
          Object.defineProperty(this,'status',{value:200});
          Object.defineProperty(this,'readyState',{value:4});
          this.onreadystatechange&&this.onreadystatechange(); this.onload&&this.onload();
        };
        if(hit.mime.startsWith('application/')||hit.mime.startsWith('text/')||hit.mime.startsWith('image/')||hit.mime.startsWith('audio/')||hit.mime.startsWith('video/')) {
          fr.readAsArrayBuffer(blob);
        } else {
          fr.readAsText(blob);
        }
        return;
      }
    }catch(e){}
    return _send.apply(this,arguments);
  };
})();
</script>`;
            const i = html.lastIndexOf('</body>');
            return i === -1 ? html + runtime : html.slice(0,i) + runtime + html.slice(i);
          }

          const finalHtml = `<!doctype html><html><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Eaglercraft 1.8.8 â€” Standalone</title>
</head><body>
${indexHtml}
</body></html>`;
          const out = inject(finalHtml, assetMap);
          fs.writeFileSync(outFile, out, 'utf8');
          console.log('Wrote', outFile, (fs.statSync(outFile).size/1024/1024).toFixed(1)+' MB');
          EOF

      - name: Pack to single index.html
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/single"
          mkdir -p "$OUT_DIR"
          node make-singlefile.js -i "${{ steps.locate.outputs.BUILD_DIR }}" -o "$OUT_DIR/index.html" \
            --map "assets.epk=assets/asset.epk" \
            --map "./assets.epk=/assets.epk" \
            || node make-singlefile.js -i "${{ steps.locate.outputs.BUILD_DIR }}" -o "$OUT_DIR/index.html"

      - name: Upload single-file index.html
        uses: actions/upload-artifact@v4
        with:
          name: eagler-1.8.8-single
          path: single/index.html
          if-no-files-found: error
