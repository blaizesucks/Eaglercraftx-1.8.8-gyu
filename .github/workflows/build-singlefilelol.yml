name: Build EaglercraftX 1.8.8 Standalone

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # STEP 1 — Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 2 — Install Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # STEP 3 — Install Node.js for single-file packaging
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # STEP 4 — Make scripts executable if needed
      - name: Make scripts executable
        run: |
          chmod +x CompileLatestClient.sh || true
          chmod +x buildtools/*.sh || true

      # STEP 5 — Try to build the client using BuildTools
      - name: Compile client via BuildTools
        run: |
          set -e
          cd buildtools

          echo ">>> Attempting BuildTools..."
          if [ -f BuildTools.jar ]; then
            java -jar BuildTools.jar --make client --teavm --offline || \
            java -jar BuildTools.jar --make latest-client --teavm --offline || \
            java -jar BuildTools.jar --workspace workspace --pull --clean --teavm --client || \
            java -jar BuildTools.jar --make client --offline || true
          fi

          cd ..
          if [ ! -f buildtools/latest-client/index.html ] && [ -f CompileLatestClient.sh ]; then
            ./CompileLatestClient.sh || true
          fi

      # STEP 6 — Locate built index.html
      - name: Locate build output
        id: locate
        run: |
          set -e
          FOUND="$(find buildtools -type f -name index.html | head -n 1 || true)"
          if [ -z "$FOUND" ]; then
            FOUND="$(find . -type f -name index.html | head -n 1 || true)"
          fi
          if [ -z "$FOUND" ]; then
            echo "No index.html found!"
            exit 1
          fi
          echo "build_dir=$(dirname "$FOUND")" >> "$GITHUB_OUTPUT"
          echo "Found build directory: $(dirname "$FOUND")"

      # STEP 7 — Write JS packer for single-file HTML
      - name: Write packer script
        run: |
          cat > make-singlefile.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function guessMime(file) {
            const ext = file.toLowerCase().split('.').pop();
            const types = {
              js:'text/javascript',json:'application/json',html:'text/html',css:'text/css',
              png:'image/png',jpg:'image/jpeg',jpeg:'image/jpeg',gif:'image/gif',webp:'image/webp',svg:'image/svg+xml',
              mp3:'audio/mpeg',ogg:'audio/ogg',wav:'audio/wav',mp4:'video/mp4',wasm:'application/wasm',
              epk:'application/octet-stream',zip:'application/zip',pak:'application/octet-stream'
            };
            return types[ext] || 'application/octet-stream';
          }

          function walk(dir) {
            const result = [];
            (function recurse(d) {
              for (const file of fs.readdirSync(d)) {
                const full = path.join(d, file);
                const stat = fs.statSync(full);
                if (stat.isDirectory()) recurse(full);
                else result.push({ abs: full, rel: path.relative(dir, full) });
              }
            })(dir);
            return result;
          }

          const args = process.argv.slice(2);
          const inDir = args[args.indexOf("-i") + 1];
          const outFile = args[args.indexOf("-o") + 1];
          const indexPath = path.join(inDir, 'index.html');
          let html = fs.readFileSync(indexPath, 'utf8');

          const classesPath = path.join(inDir, 'classes.js');
          if (fs.existsSync(classesPath)) {
            const classesJs = fs.readFileSync(classesPath, 'utf8');
            html = html.replace(/<script[^>]*src=["'][^"']*classes\.js["'][^>]*><\/script>/i, `<script>${classesJs}</script>`);
          }

          const files = walk(inDir).filter(f => f.rel !== 'index.html' && f.rel !== 'classes.js');
          const assetMap = {};
          for (const f of files) {
            const mime = guessMime(f.rel);
            const b64 = fs.readFileSync(f.abs).toString('base64');
            assetMap[f.rel] = { mime, data: b64 };
          }

          const runtime = `<script>
            window.ASSETS=${JSON.stringify(assetMap)};
            const origFetch = window.fetch;
            window.fetch = async (url, opts) => {
              const key = url.split('/').pop();
              if (ASSETS[key]) {
                const data = ASSETS[key];
                const buffer = Uint8Array.from(atob(data.data), c => c.charCodeAt(0));
                return new Response(buffer, { status: 200, headers: { 'Content-Type': data.mime } });
              }
              return origFetch(url, opts);
            };
          </script>`;

          html = html.replace('</body>', `${runtime}</body>`);
          fs.writeFileSync(outFile, html);
          EOF

      # STEP 8 — Create single standalone HTML file
      - name: Pack single index.html
        run: |
          mkdir -p single
          node make-singlefile.js -i "${{ steps.locate.outputs.build_dir }}" -o "single/index.html"

      # STEP 9 — Upload raw build folder
      - name: Upload raw build
        uses: actions/upload-artifact@v4
        with:
          name: eaglercraftx-raw-build
          path: ${{ steps.locate.outputs.build_dir }}/**

      # STEP 10 — Upload standalone HTML
      - name: Upload single-file HTML
        uses: actions/upload-artifact@v4
        with:
          name: eaglercraftx-single-file
          path: single/index.html
